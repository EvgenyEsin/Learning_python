# Задача № 2. Добавьте в пакет, созданный на семинаре, шахматные модуль.
# Внутри него напишите код, решающий задачу о 8 ферзях. Известно, что на доске 8x8 можно расставить 8 ферзей так,
# чтобы они не били друг друга. Вам дата расстановка 8 ферзей на доске. Определите, есть ли среди них пара
# бьющих друг жруга. Программа получает на вход 8 пар чисел, каждое число от 1 до 8  координаты 8 ферзей.
# Если ферзи не бьют друг друга верните истину, а если бьют - ложь.


__all__ = ['is_attacking', 'check_queens', 'queens_creature']

# Функция проверки нахождения ферзей на одной линии (по горизонтали, вертикали и диагонали)
# Возвращает истину, если двое ферзей находятся на одной линни.
def is_attacking(x1: int, y1: int, x2: int, y2: int) -> bool:
    return x1 == x2 or y1 == y2 or abs(x1 - x2) == abs(y1 - y2)

# функция передает в цикле последовательно координаты пары ферзей в функцию is_attacking
def check_queens(queens):
    for i in range(len(queens)):
        for j in range(i+1, len(queens)):
            if is_attacking(queens[i][0], queens[i][1], queens[j][0], queens[j][1]):
                return False # Если хотя бы одна пара ферзей бьет друг друга
    return True # Если ферзи не бьют друг друга

def queens_creature():
    queens = []
    for i in range(8):
        x, y = map(int, input(f'Введите координаты {i+1} ферзя (через пробел): ').split())
        queens.append((x, y))
    return queens


if __name__ == '__main__':
    queens = queens_creature()
    result = check_queens(queens)
    print(result)

# True:
# 1. 
# (1, 1) (2, 5) (3, 8) (4, 6) (5, 3) (6, 7) (7, 2) (8, 4)
# 2. 
# (1, 1) (2, 6) (3, 8) (4, 3) (5, 7) (6, 4) (7, 2) (8, 5)
# 3. 
# (1, 1) (2, 7) (3, 4) (4, 6) (5, 8) (6, 2) (7, 5) (8, 3)
# 4. 
# (1, 1) (2, 7) (3, 5) (4, 8) (5, 2) (6, 4) (7, 6) (8, 3)